<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Wenikids-Station</title>

</head>
<body>
    <%-err%><br>
    <% include ../public/header.html %>
    <%
    if(station){
        var str;
        for(var i=0; i<station.length; i++){
            str = station[i].name + " 정류장";
            if (admin){
                str += "<button onclick='delStation(" + station[i].name + ")'>삭제</button>"
            }
            %>
            <%-str%>
            <br>
            <%
        }
    }
    else{
        var str = '정류장이 존재하지 않습니다'
    }
    %>
    <!-- 선생님일경우 -->
    <div class="station_new">
        <form action="/station/new" method="POST">
            <label for="name">정류장 이름</label>
            <input type="text" name="name"><br>
            <label for="location">위치</label>
            <textarea name="location" cols="40" rows="1" id="location">원하는 위치를 클릭하세요</textarea>
            <input type="submit" value="확인">
        </form>
    </div>
    
    <div id="map" style="width:500px;height:400px;"></div>
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=API_KEY"></script>

    <script>
    
    //정류장 삭제
    function delStation(name){
        window.location.href = '/station/delete?name='+name;
    }

    //
    //     Daum Map API
    //
    var container = document.getElementById('map'); //지도를 담을 영역의 DOM 레퍼런스
    var options = { //지도를 생성할 때 필요한 기본 옵션
        center: new daum.maps.LatLng(33.450701, 126.570667), //지도의 중심좌표.
        level: 3 //지도의 레벨(확대, 축소 정도)
    };
    var map = new daum.maps.Map(container, options); //지도 생성 및 객체 리턴

    var station = <%- JSON.stringify(station) %>;

    for(var i=0; i<station.length; i++){
        // 마커가 표시될 위치입니다 
        var markerPosition  = new daum.maps.LatLng(station[i].location._latitude, station[i].location._longitude); 
        // 마커를 생성합니다
        var marker = new daum.maps.Marker({
            position: markerPosition
        });
        // 마커가 지도 위에 표시되도록 설정합니다
        marker.setMap(map);

        // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다
        var iwContent = '<div style="padding:5px;">'+ station[i].order+') ' + station[i].name +'</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다
            iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다

        // 인포윈도우를 생성합니다
        var infowindow = new daum.maps.InfoWindow({
            content : iwContent,
            removable : iwRemoveable
        });

        // 마커에 클릭이벤트를 등록합니다
        daum.maps.event.addListener(marker, 'click', makeClickListener(map, marker, infowindow));
    }   
    // 인포윈도우를 표시하는 클로저를 만드는 함수입니다 
    function makeClickListener(map, marker, infowindow) {
        return function() {
            infowindow.open(map, marker);
        };
    }
    // 지도에 클릭 이벤트를 등록합니다
    var newmarker = null;
    // 지도를 클릭하면 마지막 파라미터로 넘어온 함수를 호출합니다
    daum.maps.event.addListener(map, 'click', function(mouseEvent) {        

        // 클릭한 위도, 경도 정보를 가져옵니다 
        var latlng = mouseEvent.latLng; 
        
        // 마커 위치를 클릭한 위치로 옮깁니다
        if(newmarker){
            newmarker.setPosition(latlng);
        }
        else{
            newmarker = new daum.maps.Marker({
                position : latlng
            });
            newmarker.setMap(map);
        }
        
        var message = latlng.getLat() + '/';
        message += latlng.getLng();
        
        var resultDiv = document.getElementById('location'); 
        resultDiv.innerHTML = message;
        
    });
    </script>

   </body>
</html>
